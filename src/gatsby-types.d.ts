/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type County = Node & {
  readonly body: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly childrenUrl: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly live: Maybe<Scalars['Boolean']>;
  readonly meta: Maybe<CountyMeta>;
  readonly pageId: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  readonly title: Maybe<Scalars['String']>;
};

type CountyConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<CountyEdge>;
  readonly group: ReadonlyArray<CountyGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<County>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type CountyConnection_distinctArgs = {
  field: CountyFieldSelector;
};


type CountyConnection_groupArgs = {
  field: CountyFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type CountyConnection_maxArgs = {
  field: CountyFieldSelector;
};


type CountyConnection_minArgs = {
  field: CountyFieldSelector;
};


type CountyConnection_sumArgs = {
  field: CountyFieldSelector;
};

type CountyEdge = {
  readonly next: Maybe<County>;
  readonly node: County;
  readonly previous: Maybe<County>;
};

type CountyFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenUrl: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly live: InputMaybe<FieldSelectorEnum>;
  readonly meta: InputMaybe<CountyMetaFieldSelector>;
  readonly pageId: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type CountyFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenUrl: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly live: InputMaybe<BooleanQueryOperatorInput>;
  readonly meta: InputMaybe<CountyMetaFilterInput>;
  readonly pageId: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type CountyFilterListInput = {
  readonly elemMatch: InputMaybe<CountyFilterInput>;
};

type CountyGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<CountyEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<CountyGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<County>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type CountyGroupConnection_distinctArgs = {
  field: CountyFieldSelector;
};


type CountyGroupConnection_groupArgs = {
  field: CountyFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type CountyGroupConnection_maxArgs = {
  field: CountyFieldSelector;
};


type CountyGroupConnection_minArgs = {
  field: CountyFieldSelector;
};


type CountyGroupConnection_sumArgs = {
  field: CountyFieldSelector;
};

type CountyMeta = {
  readonly detail_url: Maybe<Scalars['String']>;
  readonly html_url: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly search_description: Maybe<Scalars['String']>;
  readonly seo_title: Maybe<Scalars['String']>;
  readonly show_in_menus: Maybe<Scalars['Boolean']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type CountyMetaFieldSelector = {
  readonly detail_url: InputMaybe<FieldSelectorEnum>;
  readonly html_url: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly search_description: InputMaybe<FieldSelectorEnum>;
  readonly seo_title: InputMaybe<FieldSelectorEnum>;
  readonly show_in_menus: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type CountyMetaFilterInput = {
  readonly detail_url: InputMaybe<StringQueryOperatorInput>;
  readonly html_url: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly search_description: InputMaybe<StringQueryOperatorInput>;
  readonly seo_title: InputMaybe<StringQueryOperatorInput>;
  readonly show_in_menus: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type CountyMetaSortInput = {
  readonly detail_url: InputMaybe<SortOrderEnum>;
  readonly html_url: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly search_description: InputMaybe<SortOrderEnum>;
  readonly seo_title: InputMaybe<SortOrderEnum>;
  readonly show_in_menus: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type CountySortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenUrl: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly live: InputMaybe<SortOrderEnum>;
  readonly meta: InputMaybe<CountyMetaSortInput>;
  readonly pageId: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  /** Returns the first child node of type LayerConfigJson or null if there are no children of given type on this node */
  readonly childLayerConfigJson: Maybe<LayerConfigJson>;
  /** Returns the first child node of type State or null if there are no children of given type on this node */
  readonly childState: Maybe<State>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  /** Returns all children nodes filtered by type LayerConfigJson */
  readonly childrenLayerConfigJson: Maybe<ReadonlyArray<Maybe<LayerConfigJson>>>;
  /** Returns all children nodes filtered by type State */
  readonly childrenState: Maybe<ReadonlyArray<Maybe<State>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childLayerConfigJson: InputMaybe<LayerConfigJsonFieldSelector>;
  readonly childState: InputMaybe<StateFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childrenLayerConfigJson: InputMaybe<LayerConfigJsonFieldSelector>;
  readonly childrenState: InputMaybe<StateFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly childLayerConfigJson: InputMaybe<LayerConfigJsonFilterInput>;
  readonly childState: InputMaybe<StateFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly childrenLayerConfigJson: InputMaybe<LayerConfigJsonFilterListInput>;
  readonly childrenState: InputMaybe<StateFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childLayerConfigJson: InputMaybe<LayerConfigJsonSortInput>;
  readonly childState: InputMaybe<StateSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childrenLayerConfigJson: InputMaybe<LayerConfigJsonSortInput>;
  readonly childrenState: InputMaybe<StateSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type LayerConfigJson = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly columnSets: Maybe<ReadonlyArray<Maybe<LayerConfigJsonColumnSets>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsonId: Maybe<Scalars['String']>;
  readonly key: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
};

type LayerConfigJsonColumnSets = {
  readonly key: Maybe<Scalars['String']>;
  readonly metadata: Maybe<LayerConfigJsonColumnSetsMetadata>;
  readonly name: Maybe<Scalars['String']>;
  readonly subgroups: Maybe<ReadonlyArray<Maybe<LayerConfigJsonColumnSetsSubgroups>>>;
  readonly total: Maybe<LayerConfigJsonColumnSetsTotal>;
  readonly type: Maybe<Scalars['String']>;
};

type LayerConfigJsonColumnSetsFieldSelector = {
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly metadata: InputMaybe<LayerConfigJsonColumnSetsMetadataFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly subgroups: InputMaybe<LayerConfigJsonColumnSetsSubgroupsFieldSelector>;
  readonly total: InputMaybe<LayerConfigJsonColumnSetsTotalFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type LayerConfigJsonColumnSetsFilterInput = {
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly metadata: InputMaybe<LayerConfigJsonColumnSetsMetadataFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly subgroups: InputMaybe<LayerConfigJsonColumnSetsSubgroupsFilterListInput>;
  readonly total: InputMaybe<LayerConfigJsonColumnSetsTotalFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type LayerConfigJsonColumnSetsFilterListInput = {
  readonly elemMatch: InputMaybe<LayerConfigJsonColumnSetsFilterInput>;
};

type LayerConfigJsonColumnSetsMetadata = {
  readonly race: Maybe<Scalars['String']>;
  readonly year: Maybe<Scalars['Int']>;
};

type LayerConfigJsonColumnSetsMetadataFieldSelector = {
  readonly race: InputMaybe<FieldSelectorEnum>;
  readonly year: InputMaybe<FieldSelectorEnum>;
};

type LayerConfigJsonColumnSetsMetadataFilterInput = {
  readonly race: InputMaybe<StringQueryOperatorInput>;
  readonly year: InputMaybe<IntQueryOperatorInput>;
};

type LayerConfigJsonColumnSetsMetadataSortInput = {
  readonly race: InputMaybe<SortOrderEnum>;
  readonly year: InputMaybe<SortOrderEnum>;
};

type LayerConfigJsonColumnSetsSortInput = {
  readonly key: InputMaybe<SortOrderEnum>;
  readonly metadata: InputMaybe<LayerConfigJsonColumnSetsMetadataSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly subgroups: InputMaybe<LayerConfigJsonColumnSetsSubgroupsSortInput>;
  readonly total: InputMaybe<LayerConfigJsonColumnSetsTotalSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type LayerConfigJsonColumnSetsSubgroups = {
  readonly key: Maybe<Scalars['String']>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  readonly sum: Maybe<Scalars['Float']>;
};

type LayerConfigJsonColumnSetsSubgroupsFieldSelector = {
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly max: InputMaybe<FieldSelectorEnum>;
  readonly min: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly sum: InputMaybe<FieldSelectorEnum>;
};

type LayerConfigJsonColumnSetsSubgroupsFilterInput = {
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly max: InputMaybe<FloatQueryOperatorInput>;
  readonly min: InputMaybe<IntQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly sum: InputMaybe<FloatQueryOperatorInput>;
};

type LayerConfigJsonColumnSetsSubgroupsFilterListInput = {
  readonly elemMatch: InputMaybe<LayerConfigJsonColumnSetsSubgroupsFilterInput>;
};

type LayerConfigJsonColumnSetsSubgroupsSortInput = {
  readonly key: InputMaybe<SortOrderEnum>;
  readonly max: InputMaybe<SortOrderEnum>;
  readonly min: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly sum: InputMaybe<SortOrderEnum>;
};

type LayerConfigJsonColumnSetsTotal = {
  readonly key: Maybe<Scalars['String']>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  readonly sum: Maybe<Scalars['Float']>;
};

type LayerConfigJsonColumnSetsTotalFieldSelector = {
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly max: InputMaybe<FieldSelectorEnum>;
  readonly min: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly sum: InputMaybe<FieldSelectorEnum>;
};

type LayerConfigJsonColumnSetsTotalFilterInput = {
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly max: InputMaybe<FloatQueryOperatorInput>;
  readonly min: InputMaybe<IntQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly sum: InputMaybe<FloatQueryOperatorInput>;
};

type LayerConfigJsonColumnSetsTotalSortInput = {
  readonly key: InputMaybe<SortOrderEnum>;
  readonly max: InputMaybe<SortOrderEnum>;
  readonly min: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly sum: InputMaybe<SortOrderEnum>;
};

type LayerConfigJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LayerConfigJsonEdge>;
  readonly group: ReadonlyArray<LayerConfigJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<LayerConfigJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LayerConfigJsonConnection_distinctArgs = {
  field: LayerConfigJsonFieldSelector;
};


type LayerConfigJsonConnection_groupArgs = {
  field: LayerConfigJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LayerConfigJsonConnection_maxArgs = {
  field: LayerConfigJsonFieldSelector;
};


type LayerConfigJsonConnection_minArgs = {
  field: LayerConfigJsonFieldSelector;
};


type LayerConfigJsonConnection_sumArgs = {
  field: LayerConfigJsonFieldSelector;
};

type LayerConfigJsonEdge = {
  readonly next: Maybe<LayerConfigJson>;
  readonly node: LayerConfigJson;
  readonly previous: Maybe<LayerConfigJson>;
};

type LayerConfigJsonFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly columnSets: InputMaybe<LayerConfigJsonColumnSetsFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsonId: InputMaybe<FieldSelectorEnum>;
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type LayerConfigJsonFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly columnSets: InputMaybe<LayerConfigJsonColumnSetsFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsonId: InputMaybe<StringQueryOperatorInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type LayerConfigJsonFilterListInput = {
  readonly elemMatch: InputMaybe<LayerConfigJsonFilterInput>;
};

type LayerConfigJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<LayerConfigJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<LayerConfigJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<LayerConfigJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type LayerConfigJsonGroupConnection_distinctArgs = {
  field: LayerConfigJsonFieldSelector;
};


type LayerConfigJsonGroupConnection_groupArgs = {
  field: LayerConfigJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type LayerConfigJsonGroupConnection_maxArgs = {
  field: LayerConfigJsonFieldSelector;
};


type LayerConfigJsonGroupConnection_minArgs = {
  field: LayerConfigJsonFieldSelector;
};


type LayerConfigJsonGroupConnection_sumArgs = {
  field: LayerConfigJsonFieldSelector;
};

type LayerConfigJsonSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly columnSets: InputMaybe<LayerConfigJsonColumnSetsSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsonId: InputMaybe<SortOrderEnum>;
  readonly key: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Problem = Node & {
  readonly body: Maybe<Scalars['String']>;
  readonly bounds: Maybe<ReadonlyArray<Maybe<ReadonlyArray<Maybe<Scalars['Float']>>>>>;
  readonly children: ReadonlyArray<Node>;
  readonly childrenUrl: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly live: Maybe<Scalars['Boolean']>;
  readonly meta: Maybe<ProblemMeta>;
  readonly pageId: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  readonly sources: Maybe<ReadonlyArray<Maybe<ProblemSources>>>;
  readonly title: Maybe<Scalars['String']>;
  readonly unit_count: Maybe<Scalars['Int']>;
  readonly unit_name: Maybe<Scalars['String']>;
  readonly unit_name_plural: Maybe<Scalars['String']>;
  readonly unit_type: Maybe<Scalars['String']>;
};

type ProblemConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ProblemEdge>;
  readonly group: ReadonlyArray<ProblemGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Problem>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ProblemConnection_distinctArgs = {
  field: ProblemFieldSelector;
};


type ProblemConnection_groupArgs = {
  field: ProblemFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ProblemConnection_maxArgs = {
  field: ProblemFieldSelector;
};


type ProblemConnection_minArgs = {
  field: ProblemFieldSelector;
};


type ProblemConnection_sumArgs = {
  field: ProblemFieldSelector;
};

type ProblemEdge = {
  readonly next: Maybe<Problem>;
  readonly node: Problem;
  readonly previous: Maybe<Problem>;
};

type ProblemFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly bounds: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenUrl: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly live: InputMaybe<FieldSelectorEnum>;
  readonly meta: InputMaybe<ProblemMetaFieldSelector>;
  readonly pageId: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sources: InputMaybe<ProblemSourcesFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly unit_count: InputMaybe<FieldSelectorEnum>;
  readonly unit_name: InputMaybe<FieldSelectorEnum>;
  readonly unit_name_plural: InputMaybe<FieldSelectorEnum>;
  readonly unit_type: InputMaybe<FieldSelectorEnum>;
};

type ProblemFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly bounds: InputMaybe<FloatQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenUrl: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly live: InputMaybe<BooleanQueryOperatorInput>;
  readonly meta: InputMaybe<ProblemMetaFilterInput>;
  readonly pageId: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sources: InputMaybe<ProblemSourcesFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly unit_count: InputMaybe<IntQueryOperatorInput>;
  readonly unit_name: InputMaybe<StringQueryOperatorInput>;
  readonly unit_name_plural: InputMaybe<StringQueryOperatorInput>;
  readonly unit_type: InputMaybe<StringQueryOperatorInput>;
};

type ProblemFilterListInput = {
  readonly elemMatch: InputMaybe<ProblemFilterInput>;
};

type ProblemGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ProblemEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ProblemGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Problem>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ProblemGroupConnection_distinctArgs = {
  field: ProblemFieldSelector;
};


type ProblemGroupConnection_groupArgs = {
  field: ProblemFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ProblemGroupConnection_maxArgs = {
  field: ProblemFieldSelector;
};


type ProblemGroupConnection_minArgs = {
  field: ProblemFieldSelector;
};


type ProblemGroupConnection_sumArgs = {
  field: ProblemFieldSelector;
};

type ProblemMeta = {
  readonly detail_url: Maybe<Scalars['String']>;
  readonly first_published_at: Maybe<Scalars['Date']>;
  readonly html_url: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly search_description: Maybe<Scalars['String']>;
  readonly seo_title: Maybe<Scalars['String']>;
  readonly show_in_menus: Maybe<Scalars['Boolean']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};


type ProblemMeta_first_published_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ProblemMetaFieldSelector = {
  readonly detail_url: InputMaybe<FieldSelectorEnum>;
  readonly first_published_at: InputMaybe<FieldSelectorEnum>;
  readonly html_url: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly search_description: InputMaybe<FieldSelectorEnum>;
  readonly seo_title: InputMaybe<FieldSelectorEnum>;
  readonly show_in_menus: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ProblemMetaFilterInput = {
  readonly detail_url: InputMaybe<StringQueryOperatorInput>;
  readonly first_published_at: InputMaybe<DateQueryOperatorInput>;
  readonly html_url: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly search_description: InputMaybe<StringQueryOperatorInput>;
  readonly seo_title: InputMaybe<StringQueryOperatorInput>;
  readonly show_in_menus: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ProblemMetaSortInput = {
  readonly detail_url: InputMaybe<SortOrderEnum>;
  readonly first_published_at: InputMaybe<SortOrderEnum>;
  readonly html_url: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly search_description: InputMaybe<SortOrderEnum>;
  readonly seo_title: InputMaybe<SortOrderEnum>;
  readonly show_in_menus: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ProblemSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly bounds: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenUrl: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly live: InputMaybe<SortOrderEnum>;
  readonly meta: InputMaybe<ProblemMetaSortInput>;
  readonly pageId: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sources: InputMaybe<ProblemSourcesSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly unit_count: InputMaybe<SortOrderEnum>;
  readonly unit_name: InputMaybe<SortOrderEnum>;
  readonly unit_name_plural: InputMaybe<SortOrderEnum>;
  readonly unit_type: InputMaybe<SortOrderEnum>;
};

type ProblemSources = {
  readonly id: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly value: Maybe<ReadonlyArray<Maybe<ProblemSourcesValue>>>;
};

type ProblemSourcesFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<ProblemSourcesValueFieldSelector>;
};

type ProblemSourcesFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<ProblemSourcesValueFilterListInput>;
};

type ProblemSourcesFilterListInput = {
  readonly elemMatch: InputMaybe<ProblemSourcesFilterInput>;
};

type ProblemSourcesSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<ProblemSourcesValueSortInput>;
};

type ProblemSourcesValue = {
  readonly layers: Maybe<ReadonlyArray<Maybe<ProblemSourcesValueLayers>>>;
  readonly source: Maybe<ProblemSourcesValueSource>;
};

type ProblemSourcesValueFieldSelector = {
  readonly layers: InputMaybe<ProblemSourcesValueLayersFieldSelector>;
  readonly source: InputMaybe<ProblemSourcesValueSourceFieldSelector>;
};

type ProblemSourcesValueFilterInput = {
  readonly layers: InputMaybe<ProblemSourcesValueLayersFilterListInput>;
  readonly source: InputMaybe<ProblemSourcesValueSourceFilterInput>;
};

type ProblemSourcesValueFilterListInput = {
  readonly elemMatch: InputMaybe<ProblemSourcesValueFilterInput>;
};

type ProblemSourcesValueLayers = {
  readonly columnSets: Maybe<ReadonlyArray<Maybe<ProblemSourcesValueLayersColumnSets>>>;
  readonly filter: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['String']>;
  readonly is_interactive: Maybe<Scalars['Boolean']>;
  readonly key: Maybe<Scalars['String']>;
  readonly layout: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly paint: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ProblemSourcesValueLayersColumnSets = {
  readonly key: Maybe<Scalars['String']>;
  readonly metadata: Maybe<ProblemSourcesValueLayersColumnSetsMetadata>;
  readonly name: Maybe<Scalars['String']>;
  readonly subgroups: Maybe<ReadonlyArray<Maybe<ProblemSourcesValueLayersColumnSetsSubgroups>>>;
  readonly total: Maybe<ProblemSourcesValueLayersColumnSetsTotal>;
  readonly type: Maybe<Scalars['String']>;
};

type ProblemSourcesValueLayersColumnSetsFieldSelector = {
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly metadata: InputMaybe<ProblemSourcesValueLayersColumnSetsMetadataFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly subgroups: InputMaybe<ProblemSourcesValueLayersColumnSetsSubgroupsFieldSelector>;
  readonly total: InputMaybe<ProblemSourcesValueLayersColumnSetsTotalFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ProblemSourcesValueLayersColumnSetsFilterInput = {
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly metadata: InputMaybe<ProblemSourcesValueLayersColumnSetsMetadataFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly subgroups: InputMaybe<ProblemSourcesValueLayersColumnSetsSubgroupsFilterListInput>;
  readonly total: InputMaybe<ProblemSourcesValueLayersColumnSetsTotalFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ProblemSourcesValueLayersColumnSetsFilterListInput = {
  readonly elemMatch: InputMaybe<ProblemSourcesValueLayersColumnSetsFilterInput>;
};

type ProblemSourcesValueLayersColumnSetsMetadata = {
  readonly race: Maybe<Scalars['String']>;
  readonly year: Maybe<Scalars['Int']>;
};

type ProblemSourcesValueLayersColumnSetsMetadataFieldSelector = {
  readonly race: InputMaybe<FieldSelectorEnum>;
  readonly year: InputMaybe<FieldSelectorEnum>;
};

type ProblemSourcesValueLayersColumnSetsMetadataFilterInput = {
  readonly race: InputMaybe<StringQueryOperatorInput>;
  readonly year: InputMaybe<IntQueryOperatorInput>;
};

type ProblemSourcesValueLayersColumnSetsMetadataSortInput = {
  readonly race: InputMaybe<SortOrderEnum>;
  readonly year: InputMaybe<SortOrderEnum>;
};

type ProblemSourcesValueLayersColumnSetsSortInput = {
  readonly key: InputMaybe<SortOrderEnum>;
  readonly metadata: InputMaybe<ProblemSourcesValueLayersColumnSetsMetadataSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly subgroups: InputMaybe<ProblemSourcesValueLayersColumnSetsSubgroupsSortInput>;
  readonly total: InputMaybe<ProblemSourcesValueLayersColumnSetsTotalSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ProblemSourcesValueLayersColumnSetsSubgroups = {
  readonly key: Maybe<Scalars['String']>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  readonly sum: Maybe<Scalars['Float']>;
};

type ProblemSourcesValueLayersColumnSetsSubgroupsFieldSelector = {
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly max: InputMaybe<FieldSelectorEnum>;
  readonly min: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly sum: InputMaybe<FieldSelectorEnum>;
};

type ProblemSourcesValueLayersColumnSetsSubgroupsFilterInput = {
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly max: InputMaybe<FloatQueryOperatorInput>;
  readonly min: InputMaybe<IntQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly sum: InputMaybe<FloatQueryOperatorInput>;
};

type ProblemSourcesValueLayersColumnSetsSubgroupsFilterListInput = {
  readonly elemMatch: InputMaybe<ProblemSourcesValueLayersColumnSetsSubgroupsFilterInput>;
};

type ProblemSourcesValueLayersColumnSetsSubgroupsSortInput = {
  readonly key: InputMaybe<SortOrderEnum>;
  readonly max: InputMaybe<SortOrderEnum>;
  readonly min: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly sum: InputMaybe<SortOrderEnum>;
};

type ProblemSourcesValueLayersColumnSetsTotal = {
  readonly key: Maybe<Scalars['String']>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  readonly sum: Maybe<Scalars['Float']>;
};

type ProblemSourcesValueLayersColumnSetsTotalFieldSelector = {
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly max: InputMaybe<FieldSelectorEnum>;
  readonly min: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly sum: InputMaybe<FieldSelectorEnum>;
};

type ProblemSourcesValueLayersColumnSetsTotalFilterInput = {
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly max: InputMaybe<FloatQueryOperatorInput>;
  readonly min: InputMaybe<IntQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly sum: InputMaybe<FloatQueryOperatorInput>;
};

type ProblemSourcesValueLayersColumnSetsTotalSortInput = {
  readonly key: InputMaybe<SortOrderEnum>;
  readonly max: InputMaybe<SortOrderEnum>;
  readonly min: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly sum: InputMaybe<SortOrderEnum>;
};

type ProblemSourcesValueLayersFieldSelector = {
  readonly columnSets: InputMaybe<ProblemSourcesValueLayersColumnSetsFieldSelector>;
  readonly filter: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly is_interactive: InputMaybe<FieldSelectorEnum>;
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly paint: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ProblemSourcesValueLayersFilterInput = {
  readonly columnSets: InputMaybe<ProblemSourcesValueLayersColumnSetsFilterListInput>;
  readonly filter: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly is_interactive: InputMaybe<BooleanQueryOperatorInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly paint: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ProblemSourcesValueLayersFilterListInput = {
  readonly elemMatch: InputMaybe<ProblemSourcesValueLayersFilterInput>;
};

type ProblemSourcesValueLayersSortInput = {
  readonly columnSets: InputMaybe<ProblemSourcesValueLayersColumnSetsSortInput>;
  readonly filter: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly is_interactive: InputMaybe<SortOrderEnum>;
  readonly key: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly paint: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ProblemSourcesValueSortInput = {
  readonly layers: InputMaybe<ProblemSourcesValueLayersSortInput>;
  readonly source: InputMaybe<ProblemSourcesValueSourceSortInput>;
};

type ProblemSourcesValueSource = {
  readonly id: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  readonly source_layer: Maybe<Scalars['String']>;
  readonly source_type: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type ProblemSourcesValueSourceFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly source_layer: InputMaybe<FieldSelectorEnum>;
  readonly source_type: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type ProblemSourcesValueSourceFilterInput = {
  readonly id: InputMaybe<IntQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly source_layer: InputMaybe<StringQueryOperatorInput>;
  readonly source_type: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type ProblemSourcesValueSourceSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly source_layer: InputMaybe<SortOrderEnum>;
  readonly source_type: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type Query = {
  readonly allCounty: CountyConnection;
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allLayerConfigJson: LayerConfigJsonConnection;
  readonly allProblem: ProblemConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allState: StateConnection;
  readonly allStateJson: StateJsonConnection;
  readonly county: Maybe<County>;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly layerConfigJson: Maybe<LayerConfigJson>;
  readonly problem: Maybe<Problem>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly state: Maybe<State>;
  readonly stateJson: Maybe<StateJson>;
};


type Query_allCountyArgs = {
  filter: InputMaybe<CountyFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<CountySortInput>>>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allLayerConfigJsonArgs = {
  filter: InputMaybe<LayerConfigJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<LayerConfigJsonSortInput>>>;
};


type Query_allProblemArgs = {
  filter: InputMaybe<ProblemFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ProblemSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_allStateArgs = {
  filter: InputMaybe<StateFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<StateSortInput>>>;
};


type Query_allStateJsonArgs = {
  filter: InputMaybe<StateJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<StateJsonSortInput>>>;
};


type Query_countyArgs = {
  body: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenUrl: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  live: InputMaybe<BooleanQueryOperatorInput>;
  meta: InputMaybe<CountyMetaFilterInput>;
  pageId: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  childLayerConfigJson: InputMaybe<LayerConfigJsonFilterInput>;
  childState: InputMaybe<StateFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  childrenLayerConfigJson: InputMaybe<LayerConfigJsonFilterListInput>;
  childrenState: InputMaybe<StateFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_layerConfigJsonArgs = {
  children: InputMaybe<NodeFilterListInput>;
  columnSets: InputMaybe<LayerConfigJsonColumnSetsFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsonId: InputMaybe<StringQueryOperatorInput>;
  key: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_problemArgs = {
  body: InputMaybe<StringQueryOperatorInput>;
  bounds: InputMaybe<FloatQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenUrl: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  live: InputMaybe<BooleanQueryOperatorInput>;
  meta: InputMaybe<ProblemMetaFilterInput>;
  pageId: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  sources: InputMaybe<ProblemSourcesFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  unit_count: InputMaybe<IntQueryOperatorInput>;
  unit_name: InputMaybe<StringQueryOperatorInput>;
  unit_name_plural: InputMaybe<StringQueryOperatorInput>;
  unit_type: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<BooleanQueryOperatorInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_stateArgs = {
  childCounty: InputMaybe<CountyFilterInput>;
  childProblem: InputMaybe<ProblemFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenCounty: InputMaybe<CountyFilterListInput>;
  childrenProblem: InputMaybe<ProblemFilterListInput>;
  counties: InputMaybe<StateCountiesFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsonId: InputMaybe<IntQueryOperatorInput>;
  meta: InputMaybe<StateMetaFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  problems: InputMaybe<StateProblemsFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_stateJsonArgs = {
  children: InputMaybe<NodeFilterListInput>;
  counties: InputMaybe<StateJsonCountiesFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsonId: InputMaybe<IntQueryOperatorInput>;
  meta: InputMaybe<StateJsonMetaFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  problems: InputMaybe<StateJsonProblemsFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<Scalars['Boolean']>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<FieldSelectorEnum>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<BooleanQueryOperatorInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly author: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly author: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly author: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SortOrderEnum>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type State = Node & {
  /** Returns the first child node of type County or null if there are no children of given type on this node */
  readonly childCounty: Maybe<County>;
  /** Returns the first child node of type Problem or null if there are no children of given type on this node */
  readonly childProblem: Maybe<Problem>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type County */
  readonly childrenCounty: Maybe<ReadonlyArray<Maybe<County>>>;
  /** Returns all children nodes filtered by type Problem */
  readonly childrenProblem: Maybe<ReadonlyArray<Maybe<Problem>>>;
  readonly counties: Maybe<ReadonlyArray<Maybe<StateCounties>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsonId: Maybe<Scalars['Int']>;
  readonly meta: Maybe<StateMeta>;
  readonly parent: Maybe<Node>;
  readonly problems: Maybe<ReadonlyArray<Maybe<StateProblems>>>;
  readonly title: Maybe<Scalars['String']>;
};

type StateConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<StateEdge>;
  readonly group: ReadonlyArray<StateGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<State>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type StateConnection_distinctArgs = {
  field: StateFieldSelector;
};


type StateConnection_groupArgs = {
  field: StateFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type StateConnection_maxArgs = {
  field: StateFieldSelector;
};


type StateConnection_minArgs = {
  field: StateFieldSelector;
};


type StateConnection_sumArgs = {
  field: StateFieldSelector;
};

type StateCounties = {
  readonly body: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly live: Maybe<Scalars['Boolean']>;
  readonly meta: Maybe<StateCountiesMeta>;
  readonly title: Maybe<Scalars['String']>;
};

type StateCountiesFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly live: InputMaybe<FieldSelectorEnum>;
  readonly meta: InputMaybe<StateCountiesMetaFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type StateCountiesFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
  readonly live: InputMaybe<BooleanQueryOperatorInput>;
  readonly meta: InputMaybe<StateCountiesMetaFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type StateCountiesFilterListInput = {
  readonly elemMatch: InputMaybe<StateCountiesFilterInput>;
};

type StateCountiesMeta = {
  readonly detail_url: Maybe<Scalars['String']>;
  readonly html_url: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly search_description: Maybe<Scalars['String']>;
  readonly seo_title: Maybe<Scalars['String']>;
  readonly show_in_menus: Maybe<Scalars['Boolean']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type StateCountiesMetaFieldSelector = {
  readonly detail_url: InputMaybe<FieldSelectorEnum>;
  readonly html_url: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly search_description: InputMaybe<FieldSelectorEnum>;
  readonly seo_title: InputMaybe<FieldSelectorEnum>;
  readonly show_in_menus: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type StateCountiesMetaFilterInput = {
  readonly detail_url: InputMaybe<StringQueryOperatorInput>;
  readonly html_url: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly search_description: InputMaybe<StringQueryOperatorInput>;
  readonly seo_title: InputMaybe<StringQueryOperatorInput>;
  readonly show_in_menus: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type StateCountiesMetaSortInput = {
  readonly detail_url: InputMaybe<SortOrderEnum>;
  readonly html_url: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly search_description: InputMaybe<SortOrderEnum>;
  readonly seo_title: InputMaybe<SortOrderEnum>;
  readonly show_in_menus: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type StateCountiesSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly live: InputMaybe<SortOrderEnum>;
  readonly meta: InputMaybe<StateCountiesMetaSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type StateEdge = {
  readonly next: Maybe<State>;
  readonly node: State;
  readonly previous: Maybe<State>;
};

type StateFieldSelector = {
  readonly childCounty: InputMaybe<CountyFieldSelector>;
  readonly childProblem: InputMaybe<ProblemFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenCounty: InputMaybe<CountyFieldSelector>;
  readonly childrenProblem: InputMaybe<ProblemFieldSelector>;
  readonly counties: InputMaybe<StateCountiesFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsonId: InputMaybe<FieldSelectorEnum>;
  readonly meta: InputMaybe<StateMetaFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly problems: InputMaybe<StateProblemsFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type StateFilterInput = {
  readonly childCounty: InputMaybe<CountyFilterInput>;
  readonly childProblem: InputMaybe<ProblemFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenCounty: InputMaybe<CountyFilterListInput>;
  readonly childrenProblem: InputMaybe<ProblemFilterListInput>;
  readonly counties: InputMaybe<StateCountiesFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsonId: InputMaybe<IntQueryOperatorInput>;
  readonly meta: InputMaybe<StateMetaFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly problems: InputMaybe<StateProblemsFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type StateFilterListInput = {
  readonly elemMatch: InputMaybe<StateFilterInput>;
};

type StateGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<StateEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<StateGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<State>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type StateGroupConnection_distinctArgs = {
  field: StateFieldSelector;
};


type StateGroupConnection_groupArgs = {
  field: StateFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type StateGroupConnection_maxArgs = {
  field: StateFieldSelector;
};


type StateGroupConnection_minArgs = {
  field: StateFieldSelector;
};


type StateGroupConnection_sumArgs = {
  field: StateFieldSelector;
};

type StateJson = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly counties: Maybe<ReadonlyArray<Maybe<StateJsonCounties>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsonId: Maybe<Scalars['Int']>;
  readonly meta: Maybe<StateJsonMeta>;
  readonly parent: Maybe<Node>;
  readonly problems: Maybe<ReadonlyArray<Maybe<StateJsonProblems>>>;
  readonly title: Maybe<Scalars['String']>;
};

type StateJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<StateJsonEdge>;
  readonly group: ReadonlyArray<StateJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<StateJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type StateJsonConnection_distinctArgs = {
  field: StateJsonFieldSelector;
};


type StateJsonConnection_groupArgs = {
  field: StateJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type StateJsonConnection_maxArgs = {
  field: StateJsonFieldSelector;
};


type StateJsonConnection_minArgs = {
  field: StateJsonFieldSelector;
};


type StateJsonConnection_sumArgs = {
  field: StateJsonFieldSelector;
};

type StateJsonCounties = {
  readonly body: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly live: Maybe<Scalars['Boolean']>;
  readonly meta: Maybe<StateJsonCountiesMeta>;
  readonly title: Maybe<Scalars['String']>;
};

type StateJsonCountiesFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly live: InputMaybe<FieldSelectorEnum>;
  readonly meta: InputMaybe<StateJsonCountiesMetaFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type StateJsonCountiesFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
  readonly live: InputMaybe<BooleanQueryOperatorInput>;
  readonly meta: InputMaybe<StateJsonCountiesMetaFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type StateJsonCountiesFilterListInput = {
  readonly elemMatch: InputMaybe<StateJsonCountiesFilterInput>;
};

type StateJsonCountiesMeta = {
  readonly detail_url: Maybe<Scalars['String']>;
  readonly html_url: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly search_description: Maybe<Scalars['String']>;
  readonly seo_title: Maybe<Scalars['String']>;
  readonly show_in_menus: Maybe<Scalars['Boolean']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type StateJsonCountiesMetaFieldSelector = {
  readonly detail_url: InputMaybe<FieldSelectorEnum>;
  readonly html_url: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly search_description: InputMaybe<FieldSelectorEnum>;
  readonly seo_title: InputMaybe<FieldSelectorEnum>;
  readonly show_in_menus: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type StateJsonCountiesMetaFilterInput = {
  readonly detail_url: InputMaybe<StringQueryOperatorInput>;
  readonly html_url: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly search_description: InputMaybe<StringQueryOperatorInput>;
  readonly seo_title: InputMaybe<StringQueryOperatorInput>;
  readonly show_in_menus: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type StateJsonCountiesMetaSortInput = {
  readonly detail_url: InputMaybe<SortOrderEnum>;
  readonly html_url: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly search_description: InputMaybe<SortOrderEnum>;
  readonly seo_title: InputMaybe<SortOrderEnum>;
  readonly show_in_menus: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type StateJsonCountiesSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly live: InputMaybe<SortOrderEnum>;
  readonly meta: InputMaybe<StateJsonCountiesMetaSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type StateJsonEdge = {
  readonly next: Maybe<StateJson>;
  readonly node: StateJson;
  readonly previous: Maybe<StateJson>;
};

type StateJsonFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly counties: InputMaybe<StateJsonCountiesFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsonId: InputMaybe<FieldSelectorEnum>;
  readonly meta: InputMaybe<StateJsonMetaFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly problems: InputMaybe<StateJsonProblemsFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type StateJsonFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly counties: InputMaybe<StateJsonCountiesFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsonId: InputMaybe<IntQueryOperatorInput>;
  readonly meta: InputMaybe<StateJsonMetaFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly problems: InputMaybe<StateJsonProblemsFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type StateJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<StateJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<StateJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<StateJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type StateJsonGroupConnection_distinctArgs = {
  field: StateJsonFieldSelector;
};


type StateJsonGroupConnection_groupArgs = {
  field: StateJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type StateJsonGroupConnection_maxArgs = {
  field: StateJsonFieldSelector;
};


type StateJsonGroupConnection_minArgs = {
  field: StateJsonFieldSelector;
};


type StateJsonGroupConnection_sumArgs = {
  field: StateJsonFieldSelector;
};

type StateJsonMeta = {
  readonly detail_url: Maybe<Scalars['String']>;
  readonly html_url: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly search_description: Maybe<Scalars['String']>;
  readonly seo_title: Maybe<Scalars['String']>;
  readonly show_in_menus: Maybe<Scalars['Boolean']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type StateJsonMetaFieldSelector = {
  readonly detail_url: InputMaybe<FieldSelectorEnum>;
  readonly html_url: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly search_description: InputMaybe<FieldSelectorEnum>;
  readonly seo_title: InputMaybe<FieldSelectorEnum>;
  readonly show_in_menus: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type StateJsonMetaFilterInput = {
  readonly detail_url: InputMaybe<StringQueryOperatorInput>;
  readonly html_url: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly search_description: InputMaybe<StringQueryOperatorInput>;
  readonly seo_title: InputMaybe<StringQueryOperatorInput>;
  readonly show_in_menus: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type StateJsonMetaSortInput = {
  readonly detail_url: InputMaybe<SortOrderEnum>;
  readonly html_url: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly search_description: InputMaybe<SortOrderEnum>;
  readonly seo_title: InputMaybe<SortOrderEnum>;
  readonly show_in_menus: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type StateJsonProblems = {
  readonly body: Maybe<Scalars['String']>;
  readonly bounds: Maybe<ReadonlyArray<Maybe<ReadonlyArray<Maybe<Scalars['Float']>>>>>;
  readonly id: Maybe<Scalars['Int']>;
  readonly live: Maybe<Scalars['Boolean']>;
  readonly meta: Maybe<StateJsonProblemsMeta>;
  readonly sources: Maybe<ReadonlyArray<Maybe<StateJsonProblemsSources>>>;
  readonly title: Maybe<Scalars['String']>;
  readonly unit_count: Maybe<Scalars['Int']>;
  readonly unit_name: Maybe<Scalars['String']>;
  readonly unit_name_plural: Maybe<Scalars['String']>;
  readonly unit_type: Maybe<Scalars['String']>;
};

type StateJsonProblemsFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly bounds: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly live: InputMaybe<FieldSelectorEnum>;
  readonly meta: InputMaybe<StateJsonProblemsMetaFieldSelector>;
  readonly sources: InputMaybe<StateJsonProblemsSourcesFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly unit_count: InputMaybe<FieldSelectorEnum>;
  readonly unit_name: InputMaybe<FieldSelectorEnum>;
  readonly unit_name_plural: InputMaybe<FieldSelectorEnum>;
  readonly unit_type: InputMaybe<FieldSelectorEnum>;
};

type StateJsonProblemsFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly bounds: InputMaybe<FloatQueryOperatorInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
  readonly live: InputMaybe<BooleanQueryOperatorInput>;
  readonly meta: InputMaybe<StateJsonProblemsMetaFilterInput>;
  readonly sources: InputMaybe<StateJsonProblemsSourcesFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly unit_count: InputMaybe<IntQueryOperatorInput>;
  readonly unit_name: InputMaybe<StringQueryOperatorInput>;
  readonly unit_name_plural: InputMaybe<StringQueryOperatorInput>;
  readonly unit_type: InputMaybe<StringQueryOperatorInput>;
};

type StateJsonProblemsFilterListInput = {
  readonly elemMatch: InputMaybe<StateJsonProblemsFilterInput>;
};

type StateJsonProblemsMeta = {
  readonly detail_url: Maybe<Scalars['String']>;
  readonly first_published_at: Maybe<Scalars['Date']>;
  readonly html_url: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly search_description: Maybe<Scalars['String']>;
  readonly seo_title: Maybe<Scalars['String']>;
  readonly show_in_menus: Maybe<Scalars['Boolean']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};


type StateJsonProblemsMeta_first_published_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type StateJsonProblemsMetaFieldSelector = {
  readonly detail_url: InputMaybe<FieldSelectorEnum>;
  readonly first_published_at: InputMaybe<FieldSelectorEnum>;
  readonly html_url: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly search_description: InputMaybe<FieldSelectorEnum>;
  readonly seo_title: InputMaybe<FieldSelectorEnum>;
  readonly show_in_menus: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type StateJsonProblemsMetaFilterInput = {
  readonly detail_url: InputMaybe<StringQueryOperatorInput>;
  readonly first_published_at: InputMaybe<DateQueryOperatorInput>;
  readonly html_url: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly search_description: InputMaybe<StringQueryOperatorInput>;
  readonly seo_title: InputMaybe<StringQueryOperatorInput>;
  readonly show_in_menus: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type StateJsonProblemsMetaSortInput = {
  readonly detail_url: InputMaybe<SortOrderEnum>;
  readonly first_published_at: InputMaybe<SortOrderEnum>;
  readonly html_url: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly search_description: InputMaybe<SortOrderEnum>;
  readonly seo_title: InputMaybe<SortOrderEnum>;
  readonly show_in_menus: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type StateJsonProblemsSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly bounds: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly live: InputMaybe<SortOrderEnum>;
  readonly meta: InputMaybe<StateJsonProblemsMetaSortInput>;
  readonly sources: InputMaybe<StateJsonProblemsSourcesSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly unit_count: InputMaybe<SortOrderEnum>;
  readonly unit_name: InputMaybe<SortOrderEnum>;
  readonly unit_name_plural: InputMaybe<SortOrderEnum>;
  readonly unit_type: InputMaybe<SortOrderEnum>;
};

type StateJsonProblemsSources = {
  readonly id: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly value: Maybe<ReadonlyArray<Maybe<StateJsonProblemsSourcesValue>>>;
};

type StateJsonProblemsSourcesFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<StateJsonProblemsSourcesValueFieldSelector>;
};

type StateJsonProblemsSourcesFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StateJsonProblemsSourcesValueFilterListInput>;
};

type StateJsonProblemsSourcesFilterListInput = {
  readonly elemMatch: InputMaybe<StateJsonProblemsSourcesFilterInput>;
};

type StateJsonProblemsSourcesSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<StateJsonProblemsSourcesValueSortInput>;
};

type StateJsonProblemsSourcesValue = {
  readonly layers: Maybe<ReadonlyArray<Maybe<StateJsonProblemsSourcesValueLayers>>>;
  readonly source: Maybe<StateJsonProblemsSourcesValueSource>;
};

type StateJsonProblemsSourcesValueFieldSelector = {
  readonly layers: InputMaybe<StateJsonProblemsSourcesValueLayersFieldSelector>;
  readonly source: InputMaybe<StateJsonProblemsSourcesValueSourceFieldSelector>;
};

type StateJsonProblemsSourcesValueFilterInput = {
  readonly layers: InputMaybe<StateJsonProblemsSourcesValueLayersFilterListInput>;
  readonly source: InputMaybe<StateJsonProblemsSourcesValueSourceFilterInput>;
};

type StateJsonProblemsSourcesValueFilterListInput = {
  readonly elemMatch: InputMaybe<StateJsonProblemsSourcesValueFilterInput>;
};

type StateJsonProblemsSourcesValueLayers = {
  readonly filter: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['String']>;
  readonly is_interactive: Maybe<Scalars['Boolean']>;
  readonly layout: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly paint: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type StateJsonProblemsSourcesValueLayersFieldSelector = {
  readonly filter: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly is_interactive: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly paint: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type StateJsonProblemsSourcesValueLayersFilterInput = {
  readonly filter: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly is_interactive: InputMaybe<BooleanQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly paint: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type StateJsonProblemsSourcesValueLayersFilterListInput = {
  readonly elemMatch: InputMaybe<StateJsonProblemsSourcesValueLayersFilterInput>;
};

type StateJsonProblemsSourcesValueLayersSortInput = {
  readonly filter: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly is_interactive: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly paint: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type StateJsonProblemsSourcesValueSortInput = {
  readonly layers: InputMaybe<StateJsonProblemsSourcesValueLayersSortInput>;
  readonly source: InputMaybe<StateJsonProblemsSourcesValueSourceSortInput>;
};

type StateJsonProblemsSourcesValueSource = {
  readonly id: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  readonly source_layer: Maybe<Scalars['String']>;
  readonly source_type: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type StateJsonProblemsSourcesValueSourceFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly source_layer: InputMaybe<FieldSelectorEnum>;
  readonly source_type: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type StateJsonProblemsSourcesValueSourceFilterInput = {
  readonly id: InputMaybe<IntQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly source_layer: InputMaybe<StringQueryOperatorInput>;
  readonly source_type: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type StateJsonProblemsSourcesValueSourceSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly source_layer: InputMaybe<SortOrderEnum>;
  readonly source_type: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type StateJsonSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly counties: InputMaybe<StateJsonCountiesSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsonId: InputMaybe<SortOrderEnum>;
  readonly meta: InputMaybe<StateJsonMetaSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly problems: InputMaybe<StateJsonProblemsSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type StateMeta = {
  readonly detail_url: Maybe<Scalars['String']>;
  readonly html_url: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly search_description: Maybe<Scalars['String']>;
  readonly seo_title: Maybe<Scalars['String']>;
  readonly show_in_menus: Maybe<Scalars['Boolean']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type StateMetaFieldSelector = {
  readonly detail_url: InputMaybe<FieldSelectorEnum>;
  readonly html_url: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly search_description: InputMaybe<FieldSelectorEnum>;
  readonly seo_title: InputMaybe<FieldSelectorEnum>;
  readonly show_in_menus: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type StateMetaFilterInput = {
  readonly detail_url: InputMaybe<StringQueryOperatorInput>;
  readonly html_url: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly search_description: InputMaybe<StringQueryOperatorInput>;
  readonly seo_title: InputMaybe<StringQueryOperatorInput>;
  readonly show_in_menus: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type StateMetaSortInput = {
  readonly detail_url: InputMaybe<SortOrderEnum>;
  readonly html_url: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly search_description: InputMaybe<SortOrderEnum>;
  readonly seo_title: InputMaybe<SortOrderEnum>;
  readonly show_in_menus: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type StateProblems = {
  readonly body: Maybe<Scalars['String']>;
  readonly bounds: Maybe<ReadonlyArray<Maybe<ReadonlyArray<Maybe<Scalars['Float']>>>>>;
  readonly id: Maybe<Scalars['Int']>;
  readonly live: Maybe<Scalars['Boolean']>;
  readonly meta: Maybe<StateProblemsMeta>;
  readonly sources: Maybe<ReadonlyArray<Maybe<StateProblemsSources>>>;
  readonly title: Maybe<Scalars['String']>;
  readonly unit_count: Maybe<Scalars['Int']>;
  readonly unit_name: Maybe<Scalars['String']>;
  readonly unit_name_plural: Maybe<Scalars['String']>;
  readonly unit_type: Maybe<Scalars['String']>;
};

type StateProblemsFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly bounds: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly live: InputMaybe<FieldSelectorEnum>;
  readonly meta: InputMaybe<StateProblemsMetaFieldSelector>;
  readonly sources: InputMaybe<StateProblemsSourcesFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly unit_count: InputMaybe<FieldSelectorEnum>;
  readonly unit_name: InputMaybe<FieldSelectorEnum>;
  readonly unit_name_plural: InputMaybe<FieldSelectorEnum>;
  readonly unit_type: InputMaybe<FieldSelectorEnum>;
};

type StateProblemsFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly bounds: InputMaybe<FloatQueryOperatorInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
  readonly live: InputMaybe<BooleanQueryOperatorInput>;
  readonly meta: InputMaybe<StateProblemsMetaFilterInput>;
  readonly sources: InputMaybe<StateProblemsSourcesFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly unit_count: InputMaybe<IntQueryOperatorInput>;
  readonly unit_name: InputMaybe<StringQueryOperatorInput>;
  readonly unit_name_plural: InputMaybe<StringQueryOperatorInput>;
  readonly unit_type: InputMaybe<StringQueryOperatorInput>;
};

type StateProblemsFilterListInput = {
  readonly elemMatch: InputMaybe<StateProblemsFilterInput>;
};

type StateProblemsMeta = {
  readonly detail_url: Maybe<Scalars['String']>;
  readonly first_published_at: Maybe<Scalars['Date']>;
  readonly html_url: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly search_description: Maybe<Scalars['String']>;
  readonly seo_title: Maybe<Scalars['String']>;
  readonly show_in_menus: Maybe<Scalars['Boolean']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};


type StateProblemsMeta_first_published_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type StateProblemsMetaFieldSelector = {
  readonly detail_url: InputMaybe<FieldSelectorEnum>;
  readonly first_published_at: InputMaybe<FieldSelectorEnum>;
  readonly html_url: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<FieldSelectorEnum>;
  readonly search_description: InputMaybe<FieldSelectorEnum>;
  readonly seo_title: InputMaybe<FieldSelectorEnum>;
  readonly show_in_menus: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type StateProblemsMetaFilterInput = {
  readonly detail_url: InputMaybe<StringQueryOperatorInput>;
  readonly first_published_at: InputMaybe<DateQueryOperatorInput>;
  readonly html_url: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly search_description: InputMaybe<StringQueryOperatorInput>;
  readonly seo_title: InputMaybe<StringQueryOperatorInput>;
  readonly show_in_menus: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type StateProblemsMetaSortInput = {
  readonly detail_url: InputMaybe<SortOrderEnum>;
  readonly first_published_at: InputMaybe<SortOrderEnum>;
  readonly html_url: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<SortOrderEnum>;
  readonly search_description: InputMaybe<SortOrderEnum>;
  readonly seo_title: InputMaybe<SortOrderEnum>;
  readonly show_in_menus: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type StateProblemsSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly bounds: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly live: InputMaybe<SortOrderEnum>;
  readonly meta: InputMaybe<StateProblemsMetaSortInput>;
  readonly sources: InputMaybe<StateProblemsSourcesSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly unit_count: InputMaybe<SortOrderEnum>;
  readonly unit_name: InputMaybe<SortOrderEnum>;
  readonly unit_name_plural: InputMaybe<SortOrderEnum>;
  readonly unit_type: InputMaybe<SortOrderEnum>;
};

type StateProblemsSources = {
  readonly id: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly value: Maybe<ReadonlyArray<Maybe<StateProblemsSourcesValue>>>;
};

type StateProblemsSourcesFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<StateProblemsSourcesValueFieldSelector>;
};

type StateProblemsSourcesFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StateProblemsSourcesValueFilterListInput>;
};

type StateProblemsSourcesFilterListInput = {
  readonly elemMatch: InputMaybe<StateProblemsSourcesFilterInput>;
};

type StateProblemsSourcesSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<StateProblemsSourcesValueSortInput>;
};

type StateProblemsSourcesValue = {
  readonly layers: Maybe<ReadonlyArray<Maybe<StateProblemsSourcesValueLayers>>>;
  readonly source: Maybe<StateProblemsSourcesValueSource>;
};

type StateProblemsSourcesValueFieldSelector = {
  readonly layers: InputMaybe<StateProblemsSourcesValueLayersFieldSelector>;
  readonly source: InputMaybe<StateProblemsSourcesValueSourceFieldSelector>;
};

type StateProblemsSourcesValueFilterInput = {
  readonly layers: InputMaybe<StateProblemsSourcesValueLayersFilterListInput>;
  readonly source: InputMaybe<StateProblemsSourcesValueSourceFilterInput>;
};

type StateProblemsSourcesValueFilterListInput = {
  readonly elemMatch: InputMaybe<StateProblemsSourcesValueFilterInput>;
};

type StateProblemsSourcesValueLayers = {
  readonly columnSets: Maybe<ReadonlyArray<Maybe<StateProblemsSourcesValueLayersColumnSets>>>;
  readonly filter: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['String']>;
  readonly is_interactive: Maybe<Scalars['Boolean']>;
  readonly key: Maybe<Scalars['String']>;
  readonly layout: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly paint: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type StateProblemsSourcesValueLayersColumnSets = {
  readonly key: Maybe<Scalars['String']>;
  readonly metadata: Maybe<StateProblemsSourcesValueLayersColumnSetsMetadata>;
  readonly name: Maybe<Scalars['String']>;
  readonly subgroups: Maybe<ReadonlyArray<Maybe<StateProblemsSourcesValueLayersColumnSetsSubgroups>>>;
  readonly total: Maybe<StateProblemsSourcesValueLayersColumnSetsTotal>;
  readonly type: Maybe<Scalars['String']>;
};

type StateProblemsSourcesValueLayersColumnSetsFieldSelector = {
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly metadata: InputMaybe<StateProblemsSourcesValueLayersColumnSetsMetadataFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly subgroups: InputMaybe<StateProblemsSourcesValueLayersColumnSetsSubgroupsFieldSelector>;
  readonly total: InputMaybe<StateProblemsSourcesValueLayersColumnSetsTotalFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type StateProblemsSourcesValueLayersColumnSetsFilterInput = {
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly metadata: InputMaybe<StateProblemsSourcesValueLayersColumnSetsMetadataFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly subgroups: InputMaybe<StateProblemsSourcesValueLayersColumnSetsSubgroupsFilterListInput>;
  readonly total: InputMaybe<StateProblemsSourcesValueLayersColumnSetsTotalFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type StateProblemsSourcesValueLayersColumnSetsFilterListInput = {
  readonly elemMatch: InputMaybe<StateProblemsSourcesValueLayersColumnSetsFilterInput>;
};

type StateProblemsSourcesValueLayersColumnSetsMetadata = {
  readonly race: Maybe<Scalars['String']>;
  readonly year: Maybe<Scalars['Int']>;
};

type StateProblemsSourcesValueLayersColumnSetsMetadataFieldSelector = {
  readonly race: InputMaybe<FieldSelectorEnum>;
  readonly year: InputMaybe<FieldSelectorEnum>;
};

type StateProblemsSourcesValueLayersColumnSetsMetadataFilterInput = {
  readonly race: InputMaybe<StringQueryOperatorInput>;
  readonly year: InputMaybe<IntQueryOperatorInput>;
};

type StateProblemsSourcesValueLayersColumnSetsMetadataSortInput = {
  readonly race: InputMaybe<SortOrderEnum>;
  readonly year: InputMaybe<SortOrderEnum>;
};

type StateProblemsSourcesValueLayersColumnSetsSortInput = {
  readonly key: InputMaybe<SortOrderEnum>;
  readonly metadata: InputMaybe<StateProblemsSourcesValueLayersColumnSetsMetadataSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly subgroups: InputMaybe<StateProblemsSourcesValueLayersColumnSetsSubgroupsSortInput>;
  readonly total: InputMaybe<StateProblemsSourcesValueLayersColumnSetsTotalSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type StateProblemsSourcesValueLayersColumnSetsSubgroups = {
  readonly key: Maybe<Scalars['String']>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  readonly sum: Maybe<Scalars['Float']>;
};

type StateProblemsSourcesValueLayersColumnSetsSubgroupsFieldSelector = {
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly max: InputMaybe<FieldSelectorEnum>;
  readonly min: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly sum: InputMaybe<FieldSelectorEnum>;
};

type StateProblemsSourcesValueLayersColumnSetsSubgroupsFilterInput = {
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly max: InputMaybe<FloatQueryOperatorInput>;
  readonly min: InputMaybe<IntQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly sum: InputMaybe<FloatQueryOperatorInput>;
};

type StateProblemsSourcesValueLayersColumnSetsSubgroupsFilterListInput = {
  readonly elemMatch: InputMaybe<StateProblemsSourcesValueLayersColumnSetsSubgroupsFilterInput>;
};

type StateProblemsSourcesValueLayersColumnSetsSubgroupsSortInput = {
  readonly key: InputMaybe<SortOrderEnum>;
  readonly max: InputMaybe<SortOrderEnum>;
  readonly min: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly sum: InputMaybe<SortOrderEnum>;
};

type StateProblemsSourcesValueLayersColumnSetsTotal = {
  readonly key: Maybe<Scalars['String']>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  readonly sum: Maybe<Scalars['Float']>;
};

type StateProblemsSourcesValueLayersColumnSetsTotalFieldSelector = {
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly max: InputMaybe<FieldSelectorEnum>;
  readonly min: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly sum: InputMaybe<FieldSelectorEnum>;
};

type StateProblemsSourcesValueLayersColumnSetsTotalFilterInput = {
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly max: InputMaybe<FloatQueryOperatorInput>;
  readonly min: InputMaybe<IntQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly sum: InputMaybe<FloatQueryOperatorInput>;
};

type StateProblemsSourcesValueLayersColumnSetsTotalSortInput = {
  readonly key: InputMaybe<SortOrderEnum>;
  readonly max: InputMaybe<SortOrderEnum>;
  readonly min: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly sum: InputMaybe<SortOrderEnum>;
};

type StateProblemsSourcesValueLayersFieldSelector = {
  readonly columnSets: InputMaybe<StateProblemsSourcesValueLayersColumnSetsFieldSelector>;
  readonly filter: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly is_interactive: InputMaybe<FieldSelectorEnum>;
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly paint: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type StateProblemsSourcesValueLayersFilterInput = {
  readonly columnSets: InputMaybe<StateProblemsSourcesValueLayersColumnSetsFilterListInput>;
  readonly filter: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly is_interactive: InputMaybe<BooleanQueryOperatorInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly paint: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type StateProblemsSourcesValueLayersFilterListInput = {
  readonly elemMatch: InputMaybe<StateProblemsSourcesValueLayersFilterInput>;
};

type StateProblemsSourcesValueLayersSortInput = {
  readonly columnSets: InputMaybe<StateProblemsSourcesValueLayersColumnSetsSortInput>;
  readonly filter: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly is_interactive: InputMaybe<SortOrderEnum>;
  readonly key: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly paint: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type StateProblemsSourcesValueSortInput = {
  readonly layers: InputMaybe<StateProblemsSourcesValueLayersSortInput>;
  readonly source: InputMaybe<StateProblemsSourcesValueSourceSortInput>;
};

type StateProblemsSourcesValueSource = {
  readonly id: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  readonly source_layer: Maybe<Scalars['String']>;
  readonly source_type: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type StateProblemsSourcesValueSourceFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly source_layer: InputMaybe<FieldSelectorEnum>;
  readonly source_type: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type StateProblemsSourcesValueSourceFilterInput = {
  readonly id: InputMaybe<IntQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly source_layer: InputMaybe<StringQueryOperatorInput>;
  readonly source_type: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type StateProblemsSourcesValueSourceSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly source_layer: InputMaybe<SortOrderEnum>;
  readonly source_type: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type StateSortInput = {
  readonly childCounty: InputMaybe<CountySortInput>;
  readonly childProblem: InputMaybe<ProblemSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenCounty: InputMaybe<CountySortInput>;
  readonly childrenProblem: InputMaybe<ProblemSortInput>;
  readonly counties: InputMaybe<StateCountiesSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsonId: InputMaybe<SortOrderEnum>;
  readonly meta: InputMaybe<StateMetaSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly problems: InputMaybe<StateProblemsSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type SiteTitleQueryQueryVariables = Exact<{ [key: string]: never; }>;


type SiteTitleQueryQuery = { readonly site: { readonly siteMetadata: { readonly title: string | null } | null } | null };


}
